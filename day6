'''errors and exceptions types of errors /exceptions
try-blocks except finally rasing exception built in function'''
#handling zero division error
'''num=int(input("enter the numerator:"))
deno=int(input("enter the denomenator:"))
try:
    quo=num/deno
    print("Quotient:",quo)
except ZeroDivisionError:
    print("denominator cannnot be zero")'''


#multiple exception handling
'''try:
    num=int(input("enter a number:"))
    print(num**2)
except (KeyboardInterrupt):
    print("You have to enter a number.... progrm")
except (ValueError):
    print("please check before you enter... program")
print("Bye")'''


#multiple exception in a single block handling
'''try:
    num=int(input("enter a number:"))
    print(num**2)
except(KeyboardInterrupt,ValueError,TypeError):
    print("please check before entering..progrm error")'''

#raise an exception
'''try:
    num=4
    print(num)
    raise ValueError
except:
    print("even excuting perfectly...exception")'''


#re-raise an error
'''try:
    raise NameError
except:
    print("re-raise")
    raise'''


#instance using in exceptons 
'''try:
    raise Exception('hi','students')
except Exception as errorObj:
    print(type(errorObj))
    print(errorObj.args)
    print(errorObj)
    x,y=errorObj.args
    print("Assigned1:",x)
    print("Assigned2:",y)'''

'''def div(n,d):
    try:
        q=n/d
        print(q)
    except ZeroDivisionError:
        print("non-processed")
a=int(input("enter numerator:"))
b=int(input("enter denomenator:"))
div(a,b)'''


#exception-base class/all exceptions SystemExit-sys.exot() StandardError -except sys.exit()/StopIteration

'''class myError(Exception):
    def __init__(self,value):
        self.value=value
    def __str__(self):
        return repr(self.value)
try:
    raise myError(99)
except myError as e:
    print("return string is :",e.value)'''

'''try:
    print('raise eception')
    raise ValueError
finally:
    print("performong clean vy finally")'''


#intractive calc model 
class Calculator:
    def __init__(self):
        self.one=0
        self.two=0
    def input_numbers(self):
        try:
            self.one=float(input("enter 1st number:"))
            self.two=float(input("enter 2st number:"))
        except ValueError:
            print("invalid input....please enter numbers")
            self.input_numbers()
    def add(self):
        return self.one+self.two
    def subtract(self):
        return self.one-self.two
    def multiply(self):
        return self.one*self.two
    def divide(self):
        return self.one/self.two
    def mod(self):
        return self.one%self.two
    def expo(self):
        return self.one**self.two
    def floor_divide(self):
        return self.one//self.two
def display_menu():
    print("\n ==== Calculator Menu ==== \n")
    print("1.ADDITION")
    print("2.SUB")
    print("3.MUL")
    print("4.DIV")
    print("5.MOD")
    print("6.EXPO")
    print("7.floor div")
    print("8.exit")
    
def main():
    calc=Calculator()
    while True:
        display_menu()
        choice=input("select an operator(1-8):")
        if choice=='8':
            print("exit")
            break
        calc.input_numbers()
        try:
            if choice=='1':
                print("result:",calc.add())
            elif choice=='2':
                print("result:",calc.subtract())
            elif choice=='3':
                print("result:",calc.multiply())
            elif choice=='4':
                print("result:",calc.divide())
            elif choice=='5':
                print("result:",calc.mod())
            elif choice=='6':
                print("result:",calc.expo())
            elif choice=='7':
                print("result:",calc.floor_divide())
            else:
                print("invalid choice")
        except ZeroDivisionError as e:
            print("error:",e)
        except Exception as e:
            print("unexcepted error:",e)
main()
            